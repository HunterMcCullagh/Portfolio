//Drone 
//Hunter McCullagh
//June 14/2020
//Compatible with DroneTransmitter
//Uses Data from Joystick and a Self Balancing Procedure From The Gyroscope
//Read notes at bottom to understand drone layout


//Including Seperate Files
#include <Servo.h>
#include <SPI.h> //initialize radio packages
#include <nRF24L01.h>
#include <RF24.h>
#include <Wire.h>

//Initializing Radio
RF24 radio(7, 8); // CE, CSN
const byte address[6] = "00001"; //radio address

//Initializing Motors
Servo ESC1;// pin 2
Servo ESC2;// pin 3 
Servo ESC3;// pin 4
Servo ESC4;// pin 5

//Initializing Gyroscope
const int MPU = 0x68; // MPU6050 I2C address
float AccX, AccY, AccZ;
float GyroX, GyroY, GyroZ;
float accAngleX, accAngleY, gyroAngleX, gyroAngleY, gyroAngleZ;
float roll, pitch, yaw;
float AccErrorX, AccErrorY, GyroErrorX, GyroErrorY, GyroErrorZ;
float elapsedTime, currentTime, previousTime;
int c = 0;

void setup() {
  // Attaching The ESCs
  ESC1.attach(2,1000,2000); // (pin, min pulse width, max pulse width in microseconds)
  ESC2.attach(3,1000,2000);
  ESC3.attach(4,1000,2000);
  ESC4.attach(5,1000,2000); 

  //Initializes Radio
  Serial.begin(9600); //prints to dashboard 
  radio.begin();
  radio.openReadingPipe(0, address);
  radio.setPALevel(RF24_PA_MAX);
  radio.startListening(); 

  //Initialize Gyroscope
  Wire.begin();                      // Initialize comunication
  Wire.beginTransmission(MPU);       // Start communication with MPU6050 // MPU=0x68
  Wire.write(0x6B);                  // Talk to the register 6B
  Wire.write(0x00);                  // Make reset - place a 0 into the 6B register
  Wire.endTransmission(true);        //end the transmission

  
}
void loop() {
  //Gyroscope Code
  previousTime = currentTime;        // Previous time is stored before the actual time read
  currentTime = millis();            // Current time actual time read
  elapsedTime = (currentTime - previousTime) / 1000; // Divide by 1000 to get seconds
  Wire.beginTransmission(MPU);
  Wire.write(0x43);                  // Gyro data first register address 0x43
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 6, true);    // Read 4 registers total, each axis value is stored in 2 registers
  GyroX = (Wire.read() << 8 | Wire.read()) / 131.0; // For a 250deg/s range we have to divide first the raw value by 131.0, according to the datasheet
  GyroY = (Wire.read() << 8 | Wire.read()) / 131.0;
                                      // Correct the outputs with the calculated error values
  GyroX = GyroX + 0.56; // GyroErrorX ~(-0.56)
  GyroY = GyroY - 2; // GyroErrorY ~(2)
  // Currently the raw values are in degrees per seconds, deg/s, so we need to multiply by sendonds (s) to get the angle in degrees
  gyroAngleX = gyroAngleX + GyroX * elapsedTime; // deg/s * s = deg
  gyroAngleY = gyroAngleY + GyroY * elapsedTime;


  //Radio Code
  if (radio.available()) {
    int ESCInput[4]={0,0,0,0};
    int contrValue[4];
    //contrValue[1] relates to the potentiometer (up and down)
    //contrValue[2] releates to X axis (left and right)
    //contrValue[3] releates to Y axis (forwards and backwards)
    //contrValue[4] is the self-levelling button
    
    radio.read(&contrValue, sizeof(contrValue)); // recieves values from the drone transmitter
    
    if (contrValue[4]==0)//self levelling button is off
    {
        //Converting the Joystick Sensor Information, see notes for further understanding
        //arrays used for drone movement relative to joystick
        int Ymod[4] = {0,0,0,0}; //contrValue[3]
        int Xmod[4] = {0,0,0,0}; //contrValue[2]

        //Y axis if statements
        if(contrValue[3]==0)//no movement on Y axis
          {}//This statement is here so is doesn't check the other Y axis if statements
        else if(contrValue[3]>0)//move forwards
          {//raises motors 3 & 4, lowers motors 1& 2
          Ymod[1]=(-1)*contrValue[3];
          Ymod[2]=(-1)*contrValue[3];
          Ymod[3]=contrValue[3];
          Ymod[4]=contrValue[3];
          }
        else if(contrValue[3]<0)//move backwards
          {//raises motors 1 & 2, lowers motors 3& 4
          Ymod[1]=contrValue[3];
          Ymod[2]=contrValue[3];
          Ymod[3]=(-1)*contrValue[3];
          Ymod[4]=(-1)*contrValue[3];
          }

        //X axis if statements
        if(contrValue[2]==0)      //no movement on X axis
          {}                      //This statement is here so is doesn't check the other X axis if statements
          
        else if(contrValue[2]>0)  //move right
          {                       //raises motors 2 & 3, lowers motors 1& 4
          Xmod[1]=(-1)*contrValue[2];
          Xmod[2]=contrValue[2];
          Xmod[3]=contrValue[2];
          Xmod[4]=(-1)*contrValue[2];
          }
        else if(contrValue[3]<0)  //move left
          {                       //raises motors 1 & 4, lowers motors 2& 3
          Xmod[1]=contrValue[2];
          Xmod[2]=(-1)*contrValue[2];
          Xmod[3]=(-1)*contrValue[2];
          Xmod[4]=contrValue[2];
          }
          
    ESCInput[1] = contrValue[1]+Ymod[1]+Xmod[1]; // turning the sum of three variables into one variable
    ESCInput[2] = contrValue[1]+Ymod[2]+Xmod[2]; // I'm doing this so that this variable can also be used in the self levelling procedure    
    ESCInput[3] = contrValue[1]+Ymod[3]+Xmod[3];
    ESCInput[4] = contrValue[1]+Ymod[4]+Xmod[4];
   }
   else if (contrValue[4]==1) //self levlling procedure is on
   {
     selfLevel(ESCInput[4],round(gyroAngleX),round(gyroAngleY),contrValue[1]);
   }
   //Sending Data to Speed Controllers
      ESC1.write(ESCInput[1]);    // Send the signal to the ESC
      ESC2.write(ESCInput[2]);
      ESC3.write(ESCInput[3]);
      ESC4.write(ESCInput[4]);
  }
    
}

void selfLevel(int input[4],int gyroX, int gyroY,int initalPower) 
//The self levelling function uses the angle of the gyroscope values to counteract the off balance of the drone
{
  input[1]=initalPower;
  input[2]=initalPower;
  input[3]=initalPower;
  input[4]=initalPower;
 
  //X values
  if(gyroX>0)       //leaning to the left
  {
   input[2] += abs(gyroX);
   input[3] += abs(gyroX);
  }
  else if(gyroX<0)  //leaning to the right
  {
    input[1] += abs(gyroX);
    input[4] += abs(gyroX);
  }

  //Y values
  if(gyroY>0)       //leaning backwards
  {
    input[3] += abs(gyroY);
    input[4] += abs(gyroY);
  }
  else if(gyroY<0)  //leaning forwaeds
  {
    input[1] += abs(gyroY);
    input[2] += abs(gyroY);
  }
}
/*******************Notes*************
 * To understand the movement of the drone, the motors are organized in a square 
 * Having ESC1 in the top right corner and following a C shaped pattern 
 * Gyroscope amplitude are also noted using X and Y
 * Like so:
 *         -Y
 *      2    1
 *  +X            -X
 *      3    4
 *         +Y
 * 
 * 
 * 
 * 
 */
